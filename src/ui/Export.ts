import { generateSTLAndDownload, getHeights } from "../tools/HeightmapExport";
import { Filament } from "../Filament";
import { IExportConfig, IProjectConfig } from "./EventHub";

function getUniqueFilaments(filaments: Filament[]): Filament[] {
	const uniqueFilaments: Filament[] = [];
	const seenFilaments = new Set<string>();

	for (const filament of filaments) {
		const key = `${filament.colour[0]}-${filament.colour[1]}-${filament.colour[2]}-${filament.name}-${filament.opacity}`;
		if (!seenFilaments.has(key)) {
			uniqueFilaments.push(filament);
			seenFilaments.add(key);
		}
	}

	return uniqueFilaments;
}

export function generateSTL(
	computedResult: Float32Array<ArrayBuffer>,
	exportConfig: IExportConfig,
	projectConfig: IProjectConfig,
	filaments: Filament[],
) {
	if (exportConfig.imageResolution.x == 0) {
		console.log("No image");
		return;
	}

	let heights = getHeights(computedResult, exportConfig.imageResolution.x, exportConfig.imageResolution.y);
	let pixelX = exportConfig.imageResolution.x;
	if (pixelX < 2) {
		return;
	}

	let pixelScaleFactor = pixelX / (pixelX - 1);
	let sizeScaleFactor = exportConfig.detailSize;

	let scaleFactor = pixelScaleFactor * sizeScaleFactor;

	generateSTLAndDownload(heights, "filamentPainting.stl", scaleFactor);

	let filamentsUsed = getUniqueFilaments(filaments);

	let filamentsString = "";

	for (let filament of filamentsUsed) {
		filamentsString += `${filament.name} - Opacity ${filament.opacity} mm\n`;
	}

	let swapString = "";

	for (let i = 0; i < filaments.length; i++) {
		let filament = filaments[i];
		if (i == 0) {
			swapString += `- Begin with ${filament.name} as the first layer\n`;
		} else {
			swapString += `- Swap to ${filament.name} at a layer height of ${
				Math.round((filaments[i - 1].endHeight + projectConfig.layerHeight) * 100) / 100
			} mm\n`;
		}
	}

	let instructionString = `Generated by painter.vec4.ca.

Filament Library:
${filamentsString}
        
Print Instructions:
Set base layer height to ${projectConfig.baseLayerHeight} mm and layer height to ${projectConfig.layerHeight} mm.
${swapString}`;

	downloadTextFile("Filament Painter Instructions.txt", instructionString);
	return instructionString;
}

export function downloadTextFile(filename: string, content: string): void {
	const blob = new Blob([content], { type: "text/plain" });
	const url = URL.createObjectURL(blob);

	const a = document.createElement("a");
	a.href = url;
	a.download = filename;
	document.body.appendChild(a);
	a.click();

	// Cleanup
	document.body.removeChild(a);
	URL.revokeObjectURL(url);
}
